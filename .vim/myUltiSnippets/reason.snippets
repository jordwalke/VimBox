

# Labelled Argument
snippet la "aa::aa" !
${1:name}::$1 $0
endsnippet
# Labelled Argument Typed
snippet lat "aa::(aa:foo)" !
${1:name}::($1:${2:type}) $0
endsnippet

snippet obj; "{};" !
{
	${VISUAL}$0
};
endsnippet

snippet obj "{}" !
{
	${VISUAL}$0
}
endsnippet

snippet l "let x ...;" !
let ${1:binding} = $0;
endsnippet

snippet lf "let f x ...;" !
let ${1:binding} ${2:arg} => $0;
endsnippet

snippet lam "let f x ...;" !
fun ${1:arg} => $0
endsnippet

snippet lam; "let f x ...;" !
fun ${1:arg} => $0;
endsnippet

snippet lam, "let f x ...;" !
fun ${1:arg} => $0,
endsnippet

snippet t "type ...;" !
type ${1:binding} =$0;
endsnippet

snippet m "module Name = {};" !w
module ${1:ModuleName} = {
	$0
};
endsnippet

snippet mt "module type ModuleType = {};" !w
module type ${1:ModuleName} = {
	$0
};
endsnippet


snippet time "Sys.time() wraper" !w
let startSeconds = Sys.time ();
${VISUAL}
$0
let endSeconds = Sys.time ();
Printf.printf "\nTotal ms (${1:Title}): %d\n" (int_of_float ((endSeconds -. startSeconds) *. 1000.0));
endsnippet




snippet log "print_string" !w
print_string (${0:expr});
print_newline ();
endsnippet

# Cleverly evaporates the semicolon if you continue with an else
snippet while "while exrp {}" !w
while`!p snip.rv = ' (' if ' ' in t[1] else ' '`${1:expr}`!p snip.rv = ')' if ' ' in t[1] else ''` {
	$0;
};
endsnippet

snippet for "for i in x to y {}" !w
for ${1:i} in ${2:first} to ${3:last} {
	$0;
};
endsnippet

# Cleverly evaporates the semicolon if you continue with an else
snippet if "if else" !w
if`!p snip.rv = ' (' if ' ' in t[1] else ' '`${1:expr}`!p snip.rv = ')' if ' ' in t[1] else ''` {
	${2:thenExpr};
}${3: else}`!p snip.rv = '' if t[3] else ';'`$0
endsnippet

snippet else "if else" !w
else {
	${1:thenExpr};
};$0
endsnippet


# Tabs before each bar, notice how 4 actually contains 7. It's ugly because it
# had to be placed on one line.
#
# | ${2:caseOne} => ${3:exprOne}`!p snip.rv = '\n' if t[4] else ''`
# ${4:	| ${5:caseTwo} => ${6:exprTwo}`!p snip.rv = '\n' if t[7] else ''`
# ${7:	| ${8:caseThree} => ${9:exprThree}}}
# snippet sw "switch pattern {}" !w
# switch ${1:`!p snip.rv = snip.v.text.strip() if snip.v else 'expr'`} {
# 	| ${2:caseOne} => ${3:exprOne}${4:
# 	| ${5:caseTwo} => ${6:exprTwo}${7:
# 	| ${8:caseThree} => ${9:exprThree}}}
# }
# endsnippet

# Cursor is placed on the next line, right where another tab will trigger
# expansion of another case.
snippet "\|"  "one more switch case" rwb
| ${1:destructure} => ${2:expression}
endsnippet

snippet sw "switch pattern {}" !w
switch ${1:`!p snip.rv = snip.v.text.strip() if snip.v else 'expr'`} {
	| ${2:caseOne} => ${3:exprOne}
}
endsnippet

snippet sw; "switch pattern {};" !w
switch ${1:`!p snip.rv = snip.v.text.strip() if snip.v else 'expr'`} {
	| ${2:caseOne} => ${3:exprOne}
};
endsnippet

snippet sc "special comment " !w
/**
 * $0
 */
endsnippet

snippet com "(* Inline Comment *)" !w
/*
 * $0
 */
endsnippet

snippet ic "(* Inline Comment *)" !w
/* $0 */
endsnippet


# Give priority to else if, over if.
priority 100

snippet "else if" "if else" !w
else if`!p snip.rv = ' (' if ' ' in t[1] else ' '`${1:expr}`!p snip.rv = ')' if ' ' in t[1] else ''` {
	${2:thenExpr};
}${3: else}`!p snip.rv = '' if t[3] else ';'`$0
endsnippet


snippet component "React UI component module" !
let component = ReasonReact.createComponent debugName::"${1:`!p snip.rv = snip.basename`}" ();

let create ${1:::${2:propName}=${3:default}} children => component.create {
	init: fun ::state=${4:initialState} _self => state,
	render: fun ::state self => {
		<${5:tag}`!p snip.rv = ' ' if t[6] else ''`${6:className=${7:cssClass}}>`!p snip.rv = '' if t[6].endswith('/') else  '\n			'`${VISUAL}$0`!p snip.rv = '' if t[6].endswith('/') else '\n		</' + (t[5].split()[0] if t[5].split() else '') + '>'`
	}
};
endsnippet

# Add more props to the creation function!
snippet :: "XHTML ::propName=defaultVal"
::${1:propName}=${0:value}
endsnippet


# The following fails when doing var x = lam<tab><type_anything>
# var ${1:varName}`!p snip.rv = ' = ' if not (len(t[2]) == 0) else ''`${2:boundValue};
snippet v "var" !
var ${1:varName} = ${VISUAL}$0;
endsnippet


# The others are just copied from this.
snippet tag "XHTML <tag>"
<${1:tag}`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</' + (t[1].split()[0] if t[1].split() else '') + '>'`
endsnippet

# The others are just copied from this.
snippet tagret "XHTML return <tag>" !
return (
	<${1:tag}`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
	`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
	`!p snip.rv = '' if t[2].endswith('/') else '</' + (t[1].split()[0] if t[1].split() else '') + '>'`
);
endsnippet

snippet tago "XHTML <tagopen>"
<${1:tag}
	${2:className={${3:cssClass}}}
/>
endsnippet
snippet span "XHTML <span>"
<span`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</span>'`
endsnippet

snippet div "XHTML <div>"
<div`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</div>'`
endsnippet

snippet img "XHTML <img>"
<img`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</img>'`
endsnippet

snippet button "XHTML <button>"
<button`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</button>'`
endsnippet

snippet h1 "XHTML <h1>"
<h1`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</h1>'`
endsnippet

snippet h1 "XHTML <h1>"
<h1`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</h1>'`
endsnippet

snippet h2 "XHTML <h2>"
<h2`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</h2>'`
endsnippet

snippet h3 "XHTML <h3>"
<h3`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</h3>'`
endsnippet

snippet h4 "XHTML <h4>"
<h4`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</h4>'`
endsnippet

snippet h5 "XHTML <h5>"
<h5`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</h5>'`
endsnippet

snippet ul "XHTML <ul>"
<ul`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</ul>'`
endsnippet

snippet li "XHTML <li>"
<li`!p snip.rv = ' ' if not (t[2].startswith(' ') or len(t[2]) == 0) else ''`${2:className={${3:cssClass}}}>
`!p snip.rv = '' if t[2].endswith('/') else  '  '`${VISUAL}$0
`!p snip.rv = '' if t[2].endswith('/') else '</li>'`
endsnippet

snippet at "XHTML attr={}"
${1:attr}={${0:value}}
endsnippet


# vim:ft=snippets:

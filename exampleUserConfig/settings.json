{
  "//": [
    "Welcome to your main vim-box configuration",
    "--------------------------------------------",
    "- String Comments can be written anywhere by adding a // key",

    "- Config is grouped by file type, then inside of each file type it is grouped by plugin name",

    "    {javascript: {myJavaScriptPlugin: {config: {...}}}}",

    " - This configures the 'myJavaScriptPlugin' plugin inside of JavaScript files",

    " - There are a few 'special' plugins that can be configured",
    "   - installer: This configures plugins to install from github. ",
    "   - disabler: Disables some of the installed plugins with a true/false object map",
    "   - vim: The special 'vim' plugin which lets you configure vim settings as if vim were a 'plugin'",

    "- The star * groups config that apply to all file types."
  ],

  "*": {
    "installer": {
      "config": {
        "nerdcommenter": "scrooloose/nerdcommenter",
        "sensible": "tpope/vim-sensible",
        "fugitive": "tpope/vim-fugitive",
        "repeat": "tpope/vim-repeat",
        "surround": "tpope/vim-surround",
        "pairtools": "MartinLafreniere/vim-PairTools",
        "sensible": "tpope/vim-sensible",
        "NERDTree": "scrooloose/nerdtree",
        "gundo": "sjl/gundo.vim"
      }
    },

    "disabler": {
      "config": {
      }
    },
    "markdown": {
      "notes": "This is a built in markdown vim plugin",
      "config": {
        "fenced_languages": ["reason", "javascript", "html", "ocaml"],
        "syntax_conceal": true
      }
    },
    "vim": {
      "config": {
        "foldminlines": 0,
        "showmode": false,
        "colorscheme": "taste",
        "equalalways": "eval:has_key(g:plugs, 'VimSplitBalancer') ? 0 : 1",
        "completeopt": "eval: has('patch-7.4.784') ? 'menu,menuone,noinsert' : 'menu,menuone'"
      },
      "mappings": {

        "insert @silent: <c-Tab>": "keys:<Esc>gt",
        "insert @silent: <c-S-Tab>": "keys:<Esc>gT",
        "normal @silent: <c-S-Tab>": "keys:gT",
        "normal visual select operatorPending @silent:<c-Tab>": "keys:<Esc>gt",
        "normal visual select operatorPending @silent:<c-s-Tab>": "keys:<Esc>gT",


        "normal operatorPending select visual:;": "keys::",
        "visualRemapped:<C-h>": "keys:<Esc><Cr>:w<Cr>",
        "insertRemapped:<C-h>": "keys:<Esc>:w<Cr>l",
        "normalRemapped operatorPendingRemapped selectRemapped visualRemapped:<c-h>": "keys:<Esc>:w<Cr>",
        "commandLineRemapped:<C-h>": "keys:<C-c>:w<Cr>",

        "normal:K": "keys:d$",
        "insert:<C-k>": "keys:<c-\\><c-o>D",
        "insert:<C-j>": "keys:<c-\\><c-o>J",
        "insert:<C-o>": "keys:<c-\\><c-o>O",
        "insert:<s-Enter>": "keys:<c-\\><c-o>o",

        "normalRemapped operatorPendingRemapped selectRemapped visualRemapped:<m-j>": "keys:<C-d>",
        "normalRemapped operatorPendingRemapped selectRemapped visualRemapped:<m-k>": "keys:<C-u>"
      }
    },
    "vimBox": {
      "config": {
        "useDevIcons": true,
        "supportsDoubleWide": true,
        "tabSystem": "standard"
      }
    },
    "ultisnips": {
      "config": {
        "g:UltiSnipsSnippetsDir": "~/.config/vim-box/user/",
        "g:UltiSnipsSnippetDirectories": ["myUltiSnippets"],
        "g:UltiSnipsExpandTrigger": "<tab>",
        "g:UltiSnipsJumpForwardTrigger": "<tab>",
        "g:UltiSnipsJumpBackwardTrigger": "<s-tab>"
      }
    },
    "NERDTree": {
      "config": {
        "g:NERDTreeDirArrows": 0,
        "g:NERDTreeMinimalUI": 1,
        "g:NERDTreeShowBookmarks": 1,
        "g:NERDTreeWinSize": 40,
        "g:_nerdCloseIfLast": "eval: execute('autocmd bufenter * if (winnr(\"$\") == 1 && exists(\"b:NERDTree\")) | q | endif')",
        "g:_nerdRemoveUglyRO": "eval: execute('hi def link NERDTreeRO Normal')",
        "g:_nerdRemoveUglyDir": "eval: execute('hi def link NERDTreeDir Normal')",
        "g:_nerdRemoveUglyTreePart": "eval: execute('hi def link NERDTreePart StatusLine')",
        "g:_nerdRemoveUglyDirSlash": "eval: execute('hi def link NERDTreeDirSlash NonText')",
        "g:_nerdRemoveUglyOpenable": "eval: execute('hi def link NERDTreeOpenable Normal')",
        "g:_nerdRemoveUglyClosable": "eval: execute('hi def link NERDTreeClosable Normal')",
        "g:_nerdRemoveUglyCurrentNode": "eval: execute('hi def link NERDTreeCurrentNode Search')",
        "g:_nerdRemoveUglyCWD": "eval: execute('hi def link NERDTreeCWD Normal')",
        "g:_nerdRemoveUglyUp": "eval: execute('hi def link NERDTreeUp Normal')",
        "g:_nerdRemoveUglyNERDTreeFlags": "eval: execute('hi def link NERDTreeFlags Normal')"

      }
    },
    "gundo": {
      "config": {
        "close_on_revert": true
      }
    }
  },
  "javascript": {
    "pairtools": {
      "config": {
        "g:pairtools_javascript_pairclamp": 1,
        "g:pairtools_javascript_closepairs": "eval: \"(:),[:],{:}\" . ',\":\"' ",
        "g:pairtools_javascript_antimagicfield": "Comment,String,Special",
        "g:pairtools_javascript_tagwrenchhook": "tagwrench#BuiltinHTML5Hook",
        "g:pairtools_javascript_smartcloserule": "\\w,(,&,\\*",
        "g:pairtools_javascript_tagwrench": 0,
        "g:pairtools_javascript_jigsaw":  1,
        "g:pairtools_javascript_autoclose":  1,
        "g:pairtools_javascript_forcepairs": 0,
        "g:pairtools_javascript_smartclose": 1,
        "g:pairtools_javascript_antimagic":  1,
        "g:pairtools_javascript_pcexpander": 1,
        "g:pairtools_javascript_pceraser":  1,
        "g:pairtools_javascript_twexpander": 1,
        "g:pairtools_javascript_tweraser":  0,
        "g:pairtools_javascript_apostrophe": 0
      }
    }
  },
  "reason": {
    "vim": {
      "config": {
        "conceallevel": 0
      }
    },
    "pairtools": {
      "config": {
        "notes": " Tag wrench mode remaps <Esc> in insert mode which prevents having your",
        "notes": " terminal (iTerm) remap comand+s to escape sequences.  Disabling tag wrench,",
        "notes": " but you may enable later if you guard this setting under:",
        "notes": " if exists('g:gui_oni') || has('gui') && has('mac') && has('gui_running')",
        "notes": " \"  let g:pairtools_ocaml_tagwrench = 1",
        "g:pairtools_reason_pairclamp": 1,
        "g:pairtools_reason_closepairs": "eval: \"(:),[:],{:}\" . ',\":\"' ",
        "g:pairtools_reason_antimagicfield": "Comment,String,Special",
        "g:pairtools_reason_tagwrenchhook": "tagwrench#BuiltinHTML5Hook",
        "g:pairtools_reason_smartcloserule": "\\w,(,&,\\*",
        "g:pairtools_reason_tagwrench": 0,
        "g:pairtools_reason_jigsaw":  1,
        "g:pairtools_reason_autoclose":  1,
        "g:pairtools_reason_forcepairs": 0,
        "g:pairtools_reason_smartclose": 1,
        "g:pairtools_reason_antimagic":  1,
        "g:pairtools_reason_pcexpander": 1,
        "g:pairtools_reason_pceraser":  1,
        "g:pairtools_reason_twexpander": 1,
        "g:pairtools_reason_tweraser":  0,
        "g:pairtools_reason_apostrophe": 0
      }
    }
  },
  "markdown": {
    "//": [
      "For markdown filetype. Conceallevel 1 replaced concealed characters with one char",
      "with Highlight Conceal color"
    ],
    "vim": {
      "config": {
        "conceallevel": 2,
        "concealcursor": "nv"
      }
    }
  }
}
